{"version":3,"sources":["dataq.js","dq-api.js","dq-filter-modal.js","dq-grouping-modal.js","dq-next-aggregate.js","dq-query-builder.js","dq-query.js","dq-sort-modal.js","dq-table-modal.js"],"names":[],"mappings":"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","file":"dataq.min.js","sourcesContent":["/**\n * Defines the DataQ.DQ object, which is what the user of the library will interact with.\n *\n * Simply call DataQ.DQ(repo_name, callback) and DataQ will launch. After the user builds a query,\n * the callback is executed as callback(query), where query is a String representing the SQL query \n * or null if the query was not built successfully.\n */\n(function() {\n  // Create the global DataQ object if it doesn't exist.\n  window.DataQ = window.DataQ || {};\n\n  // The DataQ.Query that is being built.\n  query = null;\n\n  // The callback to execute after the query is built. It is executed as cb(query) where query\n  // is a String representing the SQL query or null if the query was not built.\n  var callback;\n\n  /**\n   * @param repo_name - The name of the repo that DataQ should work on.\n   * @param cb - The callback to trigger when the query is built.\n   */\n  DataQ.DQ = function(repo_name, cb) {\n    // Set the callback.\n    callback = cb;\n\n    // Add the container to the page.\n    var container = $(DataQ.templates[\"dataq-container\"]());\n    $('body').append(container);\n\n    // Create the query object and set the repo name.\n    query = DataQ.Query();\n    query.repo(repo_name);\n\n    // Add the table section outline to the container.\n    var html = DataQ.templates[\"dq-table-section\"]();\n    $('.dq-table-section-container').append(html);\n  };\n\n  /**\n   * Update the UI to reflect the latest query.\n   */\n  var display_query = function() {\n\n    /**********************************/\n    /*** 1: Selected Tables/Columns ***/\n    /**********************************/\n    $('.dq-selected-tables').html(\"\");\n    query.get_selected_tables().forEach(function(selected_table) {\n      var selected_columns = query.selected_columns(selected_table);\n      if (selected_columns === null) {\n        return;\n      }\n\n      // Go through each column for the table and add it to the column list.\n      var column_list = [];\n      selected_columns.forEach(function(selected_column) {\n        if (selected_column.agg === \"none\") {\n          column_list.push(selected_column.name);\n        } else {\n          // If col has an aggregate, write it as \"aggregate(col)\".\n          column_list.push(selected_column.agg + \"(\" + selected_column.name + \")\");\n        }\n      });\n\n      // Add the table and column list to the UI.\n      var html = DataQ.templates[\"dq-selected-table\"]({\n        \"table_name\": selected_table,\n        \"column_list\": column_list.join(\", \")\n      });\n      $('.dq-selected-tables').append(html);\n    });\n\n    /***************************/\n    /*** 2: Selected Filters ***/\n    /***************************/\n    $('.dq-filter-list').html(\"\");\n    query.get_filters().forEach(function(filter) {\n      $('.dq-filter-list').append(DataQ.templates['dq-filter-list-item']({\n        \"filter\": filter\n      }));\n    });\n\n    /**************************/\n    /*** 3: Selected Groups ***/\n    /**************************/\n    // Identify which groups are checked.\n    var group_strings = [];\n    query.grouping().forEach(function(group) {\n      group_strings.push(group.string);\n    });\n\n    // Display the groups.\n    if (group_strings.length > 0) {\n      $(\".dq-grouping-text\").html(group_strings.join(\", \"));\n    } else {\n      $(\".dq-grouping-text\").html(\"No Grouping...\");\n    }\n\n    /************************************/\n    /*** 4: Identify the Sort Columns ***/\n    /************************************/\n    var sort_strings = [];\n    query.sorts().forEach(function(sort) {\n      sort_strings.push(sort.string);\n    });\n    \n    // Display the sorts.\n    if (sort_strings.length > 0) {\n      $(\".dq-sorting-text\").html(sort_strings.join(\", \"));\n    } else {\n      $(\".dq-sorting-text\").html(\"No Sorting...\");\n    }\n\n  }; // end display_query\n\n  // Handle table additions.\n  $(document).on(\"click\", \".dq-btn-add-table\", function() {\n    DataQ.TableModal(query, null, display_query);\n  });\n\n  // Handle table deletes.\n  $(document).on(\"click\", \".dq-btn-delete-table\", function() {\n    var table_name = $(this).data(\"tablename\");\n    if (query.operated_column() && query.operated_column().split(\".\")[0] === table_name) {\n      query.operated_column(null);\n    }\n    query.selected_columns(table_name, null);\n    query.update_grouping();\n    display_query();\n  });\n\n  // Handle table edits.\n  $(document).on(\"click\", \".dq-btn-edit-table\", function() {\n    DataQ.TableModal(query, $(this).data(\"tablename\"), display_query);\n  });\n\n  // Handle filter additions.\n  $(document).on(\"click\", \".dq-btn-add-filter\", function() {\n    DataQ.FilterModal(query, display_query);\n  });\n\n  // Handle filter deletion.\n  $(document).on(\"click\", \".dq-btn-delete-filter\", function() {\n    var code = $(this).parent().data(\"code\");\n    query.delete_filter(code);\n    display_query();\n  });\n\n  // Handle grouping edit.\n  $(document).on(\"click\", \".dq-btn-edit-grouping\", function() {\n    DataQ.GroupingModal(query, display_query);\n  });\n\n  // Handle sorting edit.\n  $(document).on(\"click\", \".dq-btn-edit-sorting\", function() {\n    DataQ.SortModal(query, display_query);\n  });\n\n  // Handle DataQ cancel.\n  $(document).on(\"click\", \".dq-btn-cancel-query\", function() {\n    $(\".dq-black-background\").remove();\n    $(\".dataq\").remove();\n    callback(null);\n  });\n\n  // Handle DataQ run query.\n  $(document).on(\"click\", \".dq-btn-run-query\", function() {\n    $(\".dq-black-background\").remove();\n    $(\".dataq\").remove();\n    callback(DataQ.build_query(query));\n  });\n})();\n","/**\n * Helper for accessing DataQ API.\n */\n(function() {\n  // Create the global DataQ object if it doesn't exist.\n  window.DataQ = window.DataQ || {};\n\n  DataQ.API = {};\n\n  // See dataq/views.py for description of result.\n  DataQ.API.get_repos = function(callback) {\n    $.get(\"/apps/dataq/api/\", callback);\n  };\n\n  // See dataq/views.py for description of result.\n  DataQ.API.get_tables = function(repo, callback) {\n    $.get(\"/apps/dataq/api/\" + repo + \"/\", callback);\n  };\n\n  // See dataq/views.py for description of result.\n  DataQ.API.get_schema = function(repo, table, callback) {\n    $.get(\"/apps/dataq/api/\" + repo + \"/\" + table + \"/\", callback);\n  };\n})();\n","/**\n * The modal window that allows the user to create filters (of the form <val1> <operation> <val2>).\n *\n * The modal window is a bootstrap modal.\n */\n(function() {\n  // If the global DataQ object does not exist, create it.\n  window.DataQ = window.DataQ || {};\n\n  // The callback to trigger when the modal is closed. This is executed as callback().\n  var callback;\n  \n  // The DataQ.Query object being built.\n  var query;\n\n  /**\n   * Launch the modal.\n   *\n   * @param q - The DataQ.Query object being built.\n   * @param cb - The callback to execute when the filter has been added. It will be executed\n   *                   as cb().\n   */\n  DataQ.FilterModal = function(q, cb) {\n    // Set the instance variables.\n    callback = cb;\n    query = q;\n\n    // If the modal does not exist, create it.\n    var modal = $(\"#dq-filter-modal\");\n    if (modal.length === 0) {\n      var columns = [];\n\n      // Iterate through each column of each selected table and add to the list of columns.\n      query.get_selected_tables().forEach(function(selected_table) {\n        query.schema(selected_table).forEach(function(column) {\n          columns.push({\n            \"column_name\": column[0],\n            \"table_name\": selected_table,\n            \"full_name\": selected_table + \".\" + column[0]\n          });\n        });\n      });\n\n      // Create the HTML for the filter modal.\n      var html = DataQ.templates['dq-filter-modal']({\n        \"columns\": columns,\n        \"repo\": query.repo() \n      });\n\n      // Add the modal to the page.\n      $('body').append(html);\n    }\n\n    // Display the modal (disable Esc and clicking the backdrop to exit modal)\n    $('#dq-filter-modal').modal({\n      backdrop: 'static',\n      keyboard: false\n    });\n\n  } // End FilterModal\n\n  // Handle modal close.\n  $(document).on(\"click\", \".dq-filter-quit\", function() {\n    callback();\n    $(\"#dq-filter-modal\").remove();\n  });\n\n  // Handle modal done.\n  $(document).on(\"click\", \".dq-filter-done\", function() {\n    var filter1 = $('.dq-filter-1-text').val();\n    var filter2 = $('.dq-filter-2-text').val();\n    var op = $('.dq-filter-op-text').val();\n    if (filter1.length > 0 && filter2.length > 0 && op.length > 0) {\n      query.add_filter(filter1, op, filter2);\n      callback();\n      $('#dq-filter-modal').modal('hide');\n      $(\"#dq-filter-modal\").remove();\n    } else {\n      alert(\"You need to fill out the three text boxes\");\n    }\n  });\n\n  // Handle filter1 dropdown link click (in <filter1> <operation> <filter2>)\n  $(document).on(\"click\", \".dq-filter-1-link\", function() {\n    $('.dq-filter-1-text').val($(this).html());\n  });\n\n  // Handle filter2 dropdown link click (in <filter1> <operation> <filter2>)\n  $(document).on(\"click\", \".dq-filter-2-link\", function() {\n    $('.dq-filter-2-text').val($(this).html());\n  });\n\n  // Handle operation dropdown link click (in <filter1> <operation> <filter2>)\n  $(document).on(\"click\", \".dq-filter-op-link\", function() {\n    // Unescape html for > and <\n    var op = $(this).html().replace(\"&gt;\", \">\").replace(\"&lt;\", \"<\");\n    $('.dq-filter-op-text').val(op);\n  });\n\n})();\n","/***\n * The modal window for editing the groupings.\n *\n * The modal window is a bootstrap modal.\n */\n(function() {\n  // If the global DataQ object does not exist, create it.\n  window.DataQ = window.DataQ || {};\n\n  // The callback to trigger when the modal is closed. This is executed as callback().\n  var callback;\n\n  // The DataQ.Query object being built.\n  var query;\n\n  /**\n   * Launch the modal.\n   *\n   * @param q - The DataQ.Query object being built.\n   * @param cb - The callback to execute when the grouping has been modified. It will be executed\n   *              as cb().\n   */\n  DataQ.GroupingModal = function(q, cb) {\n    // Set the instance variables.\n    query = q;\n    callback = cb;\n\n    // Create the modal HTML if it doesn't exist.\n    var modal = $(\"#dq-grouping-modal\");\n    if (modal.length === 0) {\n      var html = DataQ.templates[\"dq-grouping-modal\"]({\n        columns: query.grouping()\n      });\n      $(\"body\").append(html);\n    }\n\n    // Display the modal.\n    $(\"#dq-grouping-modal\").modal({\n      backdrop: \"static\",\n      keyboard: false\n    });\n\n    // When the modal is displayed, enable iCheck and HTML5Sortable.\n    $(\"#dq-grouping-modal\").on(\"shown.bs.modal\", function() {\n      $(\".dq-grouping-modal-list\").sortable({\n        forcePlaceholderSize: true \n      });\n    });\n  }; // End GroupingModal\n\n  // Handler for close modal.\n  $(document).on(\"click\", \"#dq-grouping-modal-quit-btn\", function() {\n    callback();\n    $(\"#dq-grouping-modal\").remove();\n  });\n\n  // Handle for finishing edits.\n  $(document).on(\"click\", \"#dq-grouping-modal-done-btn\", function() {\n    var new_grouping = [];\n\n    // Iterate through each list item (in order).\n    $(\".dq-grouping-list-item\").each(function() {\n      var li = $(this);\n      var string = li.data(\"string\");\n      var grouping = query.grouping();\n      var current_group;\n\n      // Find the group associated with this list item.\n      query.grouping().forEach(function(group) {\n        if (group.string === string) {\n          current_group = group;\n        }\n      });\n\n      new_grouping.push(current_group);\n    });\n\n    query.grouping(new_grouping);\n    callback();\n    $(\"#dq-grouping-modal\").remove();\n  });\n\n})();\n","/**\n * Helper function to return the next aggregate for a given column type.\n * ex. max, min, avg, sum, count.\n *\n * This is useful to cycle through the possible aggregates as user clicks a column.\n * col1 --click--> max(col1) --click--> min(col1), etc.\n */\n(function() {\n  window.DataQ = window.DataQ || {};\n\n  // Numeric types supported in PostgreSQL.\n  var number_types = [\"bigint\", \"int8\", \"bigserial\", \"serial8\", \"double precision\", \"float8\", \n    \"integer\", \"int\", \"int4\", \"real\", \"float4\", \"smallint\", \"int2\", \"serial\", \"serial4\"];\n\n  // Turn number_types into a Javascript object for more efficient lookup.\n  // key = PostgreSQL type, val = true iff key is a numeric type.\n  var is_number = {};\n  for (var i = 0; i < number_types; i++) {\n    is_number[number_types[i]] = true;\n  }\n\n  // Helper for cycling through numeric aggregates.\n  // key = aggregate, value = next aggregate\n  // For example, a cycle (beginning at none) would be:\n  // none -> max -> min -> sum -> count -> avg -> none\n  var next_numeric_aggregate = {\n    \"none\": \"max\",\n    \"max\": \"min\",\n    \"min\": \"sum\",\n    \"sum\": \"count\",\n    \"count\": \"avg\",\n    \"avg\": \"none\"\n  };\n\n  // Helper for cycling through non-numeric aggregates.\n  var next_nonnumeric_aggregate = {\n    \"none\": \"count\",\n    \"count\": \"none\"\n  };\n\n\n  /**\n   * Determine the next aggregate in the cycle for the given column type and the current aggregate.\n   *\n   * @param columntype - The PostgreSQL type of the column.\n   * @param current_aggregate - The current aggregate operator applied to the column (ex. max, min)\n   *                            If no aggregate has been applied, this value should be either null\n   *                            or \"none\".\n   * @return  The next aggregate in the cycle.\n   */\n  DataQ.next_aggregate = function(columntype, current_aggregate) {\n    if (current_aggregate === null) {\n      current_aggregate = \"none\";\n    }\n    if (is_number[columntype]) {\n      return next_numeric_aggregate[current_aggregate];\n    } else {\n      return next_nonnumeric_aggregate[current_aggregate];\n    }\n  };\n})();\n","/**\n * Logic for constructing a SQL query string from a DataQ.Query object.\n */\n(function() {\n  // If the global DataQ object does not exist, create it.\n  window.DataQ = window.DataQ || {};\n\n  /**\n   * Take a DataQ.Query object and generate a SQL query string from it.\n   *\n   * @param query - The DataQ.Query object.\n   * @return A String representing the SQL query.\n   */\n  window.DataQ.build_query = function(query) {\n\n    // The list of columns to select.\n    var select_list = [];\n\n    // The list of tables to select from.\n    var from_list = [];\n\n    // The filters to apply.\n    var where_list = [];\n\n    // The grouping to perform.\n    var group_list = [];\n\n    // The sorting to apply.\n    var order_list = [];\n\n    // Get the current repo name - we'll need to prepend this to some of the table/column names.\n    var repo = query.repo();\n\n    // Create the FROM clause. It is simply the list of tables that the user has selected.\n    // Each item in the list is a String of the form: \"repo.table\".\n    query.get_selected_tables().forEach(function(table) {\n      from_list.push(repo + \".\" + table);\n    });\n\n    // Create the SELECT clause.\n    // Iterate through every selected column of every selected table and add the column to the \n    // select list (and write the aggregate if possible).\n    query.get_selected_tables().forEach(function(table) {\n      query.selected_columns(table).forEach(function(column) {\n        if (column.agg === undefined || column.agg === null || column.agg === \"none\") {\n          select_list.push(repo + \".\" + table + \".\" + column.name);\n        } else {\n          // When an aggregate \"agg\" on column \"col\" in table \"table\" and repo \"repo\" appears, mark\n          // \"agg(repo.table.col) as agg_table_col\".\n          select_list.push(column.agg + \"(\" + repo + \".\" + table + \".\" + column.name + \")\" + \n            \" as \" + column.agg + \"_\" + table + \"_\"\n            + column.name);\n        }\n      });\n    });\n\n    // Create the WHERE clause.\n    // Simply iterate through each filter and add it to the list.\n    query.get_filters().forEach(function(filter) {\n      where_list.push(filter.filter1 + \" \" + filter.op + \" \" + filter.filter2);\n    });\n\n    // Create the  GROUP BY clause.\n    query.grouping().forEach(function(group) {\n      var agg = group.column.agg;\n\n      // We can only add a group by if it's not the aggregate column.\n      if (agg === null || agg === undefined || agg === \"none\") {\n        group_list.push(repo + \".\" + group.string);\n      } \n    });\n\n    // Create the ORDER BY clause.\n    query.sorts().forEach(function(sort) {\n      var agg = sort.column.agg;\n      if (agg === null || agg === undefined || agg === \"none\") {\n        order_list.push(repo + \".\" + sort.string);\n      } else {\n        order_list.push(agg + \"_\" + sort.table + \"_\" + sort.column.name);\n      }\n    });\n\n    // Set the query string.\n    if (select_list.length === 0) {\n      return \"\";\n    }\n    var query_string = \"SELECT \" + select_list.join(\", \")\n        + \" FROM \" + from_list.join(\", \");\n\n    // Set the where list.\n    if (where_list.length > 0) {\n      query_string +=  \" WHERE \" + where_list.join(\" AND \");\n    }\n\n    // Set the group list.\n    if (group_list.length > 0) {\n      query_string += \" GROUP BY \" + group_list.join(\", \")\n    }\n\n    // Set the order list.\n    if (order_list.length > 0) {\n      query_string += \" ORDER BY \" + order_list.join(\", \")\n    }\n\n    // Remove leading and trailing spaces and then append semicolon.\n    query_string.trim();\n    query_string += \";\";\n    return query_string;\n  };\n})();\n","/**\n * The object for building a query.\n */\n(function() {\n  // If the DataQ object doesn't exist, create it.\n  window.DataQ = window.DataQ || {};\n\n  DataQ.Query = function() {\n    \n    // Create the object and initialize the objects.\n    var that = {};\n    that._schema_for_table_name = {};\n    that._repo_name = null;\n    that._operated_column = null;\n    that._selected_columns_for_table = {};\n    that._filter_for_code = {};\n    that._grouping = [];\n    that._sorts = {};\n\n    /**\n     * Get or set the schema for a given table.\n     *\n     * @param table_name - The name of the table.\n     * @param schema - If this argument is omitted (or undefined), this function acts as a getter\n     *                returning the schema for the given table. Otherwise, the function acts as a \n     *                setter, setting the schema for table_name.\n     *\n     * @return The schema for the table name.\n     */\n    that.schema = function(table_name, schema) {\n      if (schema !== undefined) {\n        that._schema_for_table_name[table_name] = schema;\n      } \n      return that._schema_for_table_name[table_name];\n    };\n\n    /**\n     * Get or set the repo name.\n     *\n     * @param repo_name - If this argument is omitted (or undefined), this function acts as a \n     *                    getter. Otherwise, it acts as a setter, setting the repo name.\n     *\n     * @return The name of the repo.\n     */\n    that.repo = function(repo_name) {\n      if (repo_name !== undefined) {\n        that._repo_name = repo_name;\n      }\n      return that._repo_name;\n    };\n\n    /**\n     * Get or set the operated column.\n     *\n     * @param operated_column - if this argument is omitted (or undefined), this function acts as\n     *                          a getter. Otherwise, it acts a setter, setting the operated column.\n     *\n     * @return The name of the operated column (\"table.col\"). This may be null.\n     */\n    that.operated_column = function(operated_column) {\n      if (operated_column !== undefined) {\n        that._operated_column = operated_column;\n      }\n      return that._operated_column;\n    };\n\n    that.update_grouping = function() {\n      that._grouping = [];\n      var has_operated_column = false;\n      for (var table in that._selected_columns_for_table) {\n        if (!that._selected_columns_for_table[table]) {\n          continue;\n        }\n        that._selected_columns_for_table[table].forEach(function(column) {\n          if (column.agg === \"none\") {\n            that._grouping.push({\n              \"string\": table + \".\" + column.name,\n              \"table\": table,\n              \"column\": column\n            });\n          } else {\n            has_operated_column = true;\n          }\n        });\n      } // end for each table\n\n      if (!has_operated_column) {\n        that._grouping = [];\n      }\n    };\n\n    that.selected_columns = function(table_name, selected_columns) {\n      if (selected_columns !== undefined) {\n        that._selected_columns_for_table[table_name] = selected_columns;\n      }\n      return that._selected_columns_for_table[table_name];\n    };\n\n    that.get_selected_tables = function() {\n      var tbls = [];\n      for (var k in that._selected_columns_for_table) {\n        tbls.push(k);\n      }\n      return tbls;\n    };\n\n    that.add_filter = function(filter1, op, filter2) {\n      var filter_string = filter1 + \" \" + op + \" \" + filter2;\n      var code = md5((new Date()).getTime() + filter_string);\n      that._filter_for_code[code] = {\n        \"filter1\": filter1,\n        \"op\": op,\n        \"filter2\": filter2,\n        \"filter_string\": filter_string\n      };\n      return that._filter_for_code[code];\n    };\n\n    that.delete_filter = function(code) {\n      that._filter_for_code[code] = undefined;\n    };\n\n    that.get_filters = function() {\n      var result = [];\n      for (var k in that._filter_for_code) {\n        var filter = that._filter_for_code[k];\n        if (!filter) {\n          continue;\n        }\n        result.push({\n          \"code\": k,\n          \"filter1\": filter.filter1,\n          \"op\": filter.op,\n          \"filter2\": filter.filter2,\n          \"filter_string\": filter.filter_string\n        });\n      };\n      return result;\n    };\n\n    that.grouping = function(grouping) {\n      if (grouping !== undefined) {\n        that._grouping = grouping;\n      }\n      return that._grouping;\n    };\n\n    that.add_sort = function(sort) {\n      that._sorts[sort.string] = sort;\n    };\n\n    that.delete_sort = function(sort) {\n      that._sorts[sort] = undefined;\n    };\n\n    that.sorts = function() {\n      var result = [];\n      for (var k in that._sorts) {\n        if (that._sorts[k] !== undefined) {\n          result.push(that._sorts[k]);\n        }\n      }\n      return result;\n    };\n\n    return that;\n  };\n})();\n","/**\n * The modal window that allows the user to specify the sorting of the columns.\n *\n * The modal window is a bootstrap modal.\n */\n(function() {\n  // If the global DataQ object does not exist, create it.\n  window.DataQ = window.DataQ || {};\n\n  // The callback to trigger whent he modal is closed.\n  var callback;\n\n  // The DataQ.Query object being built.\n  var query;\n\n  /**\n   * Launch the modal.\n   *\n   * @param q - The DataQ.Query object being built.\n   * @param cb - The callback to trigger when the user finishes specifying sorts. It is executed as\n   *              cb().\n   */\n  DataQ.SortModal = function(q, cb) {\n    // Set the instance variables.\n    query = q;\n    callback = cb;\n\n    // If the modal HTML does not exist, add it to the page.\n    var modal = $(\"#dq-sort-modal\");\n    if (modal.length === 0) {\n      var html = DataQ.templates['dq-sort-modal']();\n      $('body').append(html);\n    }\n\n    // Display the modal (disable Esc and clicking the backdrop to exit modal)\n    $('#dq-sort-modal').modal({\n      backdrop: 'static',\n      keyboard: false\n    });\n\n    // When the modal is shown, populate the columns.\n    $(\"#dq-sort-modal\").on(\"shown.bs.modal\", function() {\n      update_list();\n    });\n  };\n\n  // Handle dropdown item click.\n  $(document).on(\"click\", \".dq-sort-modal-dropdown-btn\", function() {\n    var list = $('.dq-sort-modal-dropdown');\n    list.html(\"\");\n\n    // When a dropdown link is clicked, add it to the list of selected columns.\n    create_items_in_dropdown().forEach(function(item) {\n      list.append(DataQ.templates[\"dq-sort-dropdown-li\"]({\n        \"item\": item\n      }));\n    });\n\n  });\n\n  // Create the items in the sort dropdown menu.\n  var create_items_in_dropdown = function() {\n    // Identify the sorts that have already been used.\n    var used_dict = {};\n    query.sorts().forEach(function(sort) {\n      used_dict[sort.string] = true;\n    });\n\n    // Iterate through every column of every selected table and, if it isn't used, add it to the \n    // list of items.\n    var items = [];\n    query.get_selected_tables().forEach(function(selected_table) {\n      query.selected_columns(selected_table).forEach(function(column) {\n        var string = selected_table + \".\" + column.name;\n        if (column.agg !== \"none\") {\n          string = column.agg + \"(\" + selected_table + \".\" + column.name + \")\";\n        }\n\n        // Don't add any item to dropdown if it's already used.\n        if (used_dict[string]) {\n          return;\n        }\n\n        items.push({\n          \"string\": string,\n          \"table\": selected_table,\n          \"column\": column\n        });\n\n      });\n    });\n\n    return items;\n  };\n\n  // Add the list items to list of used sorts.\n  var update_list = function() {\n    var list = $('.dq-sort-item-list');\n    list.html(\"\");\n    query.sorts().forEach(function(sort) {\n      var html = DataQ.templates[\"dq-sort-list-item\"]({\n        \"item\": sort \n      });\n      list.append(html);\n    });\n  };\n\n  // Handle modal close.\n  $(document).on(\"click\", \".dq-sort-modal-quit\", function() {\n    $('#dq-sort-modal').remove();\n    callback();\n  });\n\n  // Handle sort clicked.\n  $(document).on(\"click\", \".dq-sort-link\", function() {\n    var li = $(this);\n    var name = li.data(\"columnname\");\n    var type = li.data(\"columntype\");\n    var agg = li.data(\"aggregate\");\n    var table = li.data(\"table\");\n    var string = li.data(\"string\");\n\n    if (agg === undefined || agg === null) {\n      agg = \"none\";\n    }\n\n    var item = {\n      \"column\": {\n        \"name\": name,\n        \"type\": type,\n        \"agg\": agg\n      },\n      \"string\": string,\n      \"table\": table\n    };\n\n    query.add_sort(item);\n    update_list();\n\n  });\n\n  // Handle modal close.\n  $(document).on(\"click\", \".dq-sort-modal-done-btn\", function() {\n    $('#dq-sort-modal').remove();\n    callback();\n  });\n\n  // Handle delete sort.\n  $(document).on(\"click\", \".dq-sort-delete-btn\", function() {\n    var li = $(this).parent().parent();\n    var string = li.data(\"string\");\n    query.delete_sort(string);\n    update_list();\n  });\n\n})();\n","/**\n * The modal window that allows the user to select the tables (and columns from these tables) that\n * they want to use in their query.\n *\n * This modal can be used to either ADD a new table (and some of its columns) to the query or to\n * EDIT an existing table (and its columns) that is already in the query.\n *\n * The modal window is a bootstrap modal.\n */\n(function() {\n  // If the global DataQ object does not exist, create it.\n  window.DataQ = window.DataQ || {};\n\n  // The callback to trigger when the modal is closed.\n  var cb;\n\n  // The table we have selected.\n  var table;\n\n  // The DataQ.Query object being built.\n  var query;\n\n  /**\n   * Launch the modal.\n   *\n   * @param q - The DataQ.Query object being built.\n   *\n   * @param table_name - The name of the table to modify. This must be either null (in which case\n   * the \"Add Table\" modal is displayed), or a table which the current user is associated with.\n   *\n   * @param callback - The callback that is executed after the user finishes updating selections.\n   * It is executed as callback()\n   */\n  DataQ.TableModal = function(q, table_name, callback) {\n    table = table_name;\n    cb = callback;\n    query = q;\n\n    // If the modal HTML does not exist, add it to the page.\n    var modal = $(\"#dq-table-modal\");\n    if (modal.length === 0) {\n      var html = DataQ.templates['dq-table-modal']({\n        \"table_name\": table \n      });\n      $('body').append(html);\n    }\n\n    // Display the modal (disable Esc and clicking the backdrop to exit modal)\n    $('#dq-table-modal').modal({\n      backdrop: 'static',\n      keyboard: false\n    });\n    \n    // Don't allow clicking Done until the user selects a table.\n    $(\".dq-modal-done-btn\").hide();\n\n    // When the modal is shown, populate the columns.\n    $(\"#dq-table-modal\").on(\"shown.bs.modal\", function() {\n      if (table) {\n        populate_column_list(table);\n      }\n    });\n  }; \n\n  // If the user quits, trigger the callback.\n  $(document).on('click', '.dq-modal-quit', function() {\n    $(\"#dq-table-modal\").remove();\n    cb();\n  });\n\n\n  // If the user clicks the table dropdown, populate the list with the list\n  // of available tables.\n  $(document).on(\"click\", \".dq-modal-dropdown-btn\", function() {\n    var dropdown = $(\".dq-modal-dropdown\");\n    dropdown.html(\"\");\n    DataQ.API.get_tables(query.repo(), function(data) {\n      data.tables.forEach(function(table) {\n        var html = DataQ.templates[\"dq-modal-dropdown-item\"]({\n          \"item_name\": table\n        });\n        dropdown.append(html);\n      }); // end foreach\n    }) // get_tables\n  }); // document on click\n\n\n  // When a table is selected from the dropdown, create the column list.\n  $(document).on(\"click\", \".dq-modal-dropdown-link\", function() {\n    // Set the content of the dropdown.\n    var item_name = $(this).data(\"item_name\");\n    table = item_name;\n    $('.dq-modal-table-dropdown-text').text(table);\n    populate_column_list();\n  });\n\n  // Populate the list of columns with the schema of the given table.\n  var populate_column_list = function() {\n    // Get the schema for the selected tables.\n    DataQ.API.get_schema(query.repo(), table, function(data) {\n      $(\".dq-modal-done-btn\").show();\n\n      // Sort the columns by name.\n      query.schema(table, data.schema).sort(function(a, b) {return a[0] > b[0]});\n\n      // Create the HTML and add it to the UI.\n      var html = DataQ.templates[\"dq-modal-columns\"]({\n        \"columns\": query.schema(table)\n      });\n      $('.dq-column-list').html(html);\n\n      // Enable iCheck.\n      $('.dq-column-list input[type=checkbox]').iCheck({\n        checkboxClass: 'icheckbox_square-green',\n        radioClass: 'iradio_square-green',\n      });\n\n      if (query.selected_columns(table)) {\n        // Iterate through the columns for the selected table.\n        query.selected_columns(table).forEach(function(column) {\n          // Extract the data entries from the element (we find the element by selecting\n          // .dq-modal-column[data-columnname=\"colname\"]\n          var element = $('.dq-modal-column[data-columnname=\"'+column.name+'\"]');\n          element.data(\"columnname\", column.name);\n          element.data(\"columntype\", column.type);\n          element.data(\"currentaggregate\", column.agg || \"none\")\n          element.find(\"input[type=checkbox]\").iCheck('check');\n          if (column.agg !== \"none\") {\n            element.find(\"button\").text(column.agg + \"(\" + column.name + \")\");\n          }\n        }); // end forEach\n      } // if selected columns\n    });\n  };\n\n  // Handle column aggregate trigger.\n  $(document).on(\"click\", \".dq-modal-column button\", function() {\n    // Extract the data entries.\n    var parent_li = $(this).parent();\n    var columnname = parent_li.data(\"columnname\");\n    var columntype = parent_li.data(\"columntype\");\n    var currentaggregate = parent_li.data(\"currentaggregate\")\n\n    // Compute the next aggregate operator to apply.\n    var nextaggregate = DataQ.next_aggregate(columntype, currentaggregate);\n\n    // If an aggregate has already been applied, don't apply another.\n    if (query.operated_column() !== table + \".\" + columnname && query.operated_column() !== null) {\n      nextaggregate = \"none\";\n    }\n\n    // If the aggregate has been turned off, turn off the operated column.\n    // Else if this is the new operated column, indicate so.\n    if (nextaggregate === \"none\") {\n      if (query.operated_column() === table + \".\" + columnname) {\n        query.operated_column(null);\n      }\n      $(this).text(columnname);\n    } else {\n      $(this).text(nextaggregate + \"(\" + columnname + \")\");\n      query.operated_column(table + \".\" + columnname);\n    }\n    parent_li.data(\"currentaggregate\", nextaggregate);\n  });\n\n  // When this is clicked, return the selected columns.\n  $(document).on(\"click\", \".dq-modal-done-btn\", function() {\n    // Figure out the selected columns.\n    var columns = [];\n    var is_op_col_checked = false;\n\n    // Iterate through each of the columns.\n    $('.dq-modal-column').each(function() {\n      var li = $(this);\n\n      // If the column is checked.\n      if (li.find(\"input\").is(\":checked\")) {\n\n        // Extract the data entries.\n        var agg = li.data(\"currentaggregate\");\n        var type = li.data(\"columntype\");\n        var name = li.data(\"columnname\");\n\n        // If the operated column has been selected, then mark it so.\n        if (table + \".\" + name === query.operated_column()) {\n          is_op_col_checked = true;\n        }\n\n        if (agg === null || agg === undefined) {\n          agg = \"none\";\n        }\n\n        columns.push({\n          \"name\": name,\n          \"type\": type,\n          \"agg\": agg\n        });\n\n      }\n    });\n\n    // If the operated column should be in this table and has not been selected,\n    // set the operated column as null.\n    if (query.operated_column() && \n        query.operated_column().split(\".\")[0] === table && \n        !is_op_col_checked) {\n      query.operated_column(null);\n    }\n\n    // Mark the selected columns for this table, and recompute the tables.\n    query.selected_columns(table, columns);\n    query.update_grouping();\n\n    // Remove the modal from the page.\n    $(\"#dq-table-modal\").remove();\n    cb();\n  });\n\n})();\n"],"sourceRoot":"/source/"}